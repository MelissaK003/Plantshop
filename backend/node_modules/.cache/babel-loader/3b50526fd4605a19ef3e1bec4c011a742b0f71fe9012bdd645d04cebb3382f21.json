{"ast":null,"code":"var _jsxFileName = \"/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantPage() {\n  _s();\n  const [plants, setPlants] = useState([]);\n\n  // Fetch initial plants data\n  useEffect(() => {\n    fetch(\"http://localhost:6001/plants\").then(response => response.json()).then(data => setPlants(data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Function to add a new plant\n  const addPlant = newPlant => {\n    fetch(\"http://localhost:6001/plants\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newPlant)\n    }).then(response => response.json()).then(addedPlant => {\n      setPlants(prevPlants => [...prevPlants, addedPlant]); // Update state with new plant\n    }).catch(error => console.error('Error adding plant:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(NewPlantForm, {\n      onAddPlant: addPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlantList, {\n      plants: plants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantPage, \"gLr7j+f/M9K8FSUeLTOcFFeB2DY=\");\n_c = PlantPage;\nexport default PlantPage;\nvar _c;\n$RefreshReg$(_c, \"PlantPage\");","map":{"version":3,"names":["React","useState","NewPlantForm","PlantList","Search","jsxDEV","_jsxDEV","PlantPage","_s","plants","setPlants","useEffect","fetch","then","response","json","data","catch","error","console","addPlant","newPlant","method","headers","body","JSON","stringify","addedPlant","prevPlants","children","onAddPlant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\n\nfunction PlantPage() {\n  const [plants, setPlants] = useState([]);\n\n  // Fetch initial plants data\n  useEffect(() => {\n    fetch(\"http://localhost:6001/plants\")\n      .then((response) => response.json())\n      .then((data) => setPlants(data))\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  // Function to add a new plant\n  const addPlant = (newPlant) => {\n    fetch(\"http://localhost:6001/plants\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPlant),\n    })\n      .then((response) => response.json())\n      .then((addedPlant) => {\n        setPlants((prevPlants) => [...prevPlants, addedPlant]); // Update state with new plant\n      })\n      .catch((error) => console.error('Error adding plant:', error));\n  };\n\n  \n  return (\n    <main>\n      <NewPlantForm onAddPlant={addPlant} />\n      <Search />\n      <PlantList plants={plants} />\n    </main>\n  );\n}\n\nexport default PlantPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACAU,SAAS,CAAC,MAAM;IACdC,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKN,SAAS,CAACM,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,QAAQ,GAAIC,QAAQ,IAAK;IAC7BT,KAAK,CAAC,8BAA8B,EAAE;MACpCU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC,CACCR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEc,UAAU,IAAK;MACpBjB,SAAS,CAAEkB,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CACDV,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC;EAGD,oBACEZ,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACJ,YAAY;MAAC4B,UAAU,EAAEV;IAAS;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtC5B,OAAA,CAACF,MAAM;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACV5B,OAAA,CAACH,SAAS;MAACM,MAAM,EAAEA;IAAO;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACxB;AAEX;AAAC1B,EAAA,CAnCQD,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAqClB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}