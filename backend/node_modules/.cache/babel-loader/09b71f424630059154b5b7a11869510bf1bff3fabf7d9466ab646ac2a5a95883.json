{"ast":null,"code":"var _jsxFileName = \"/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantPage() {\n  _s();\n  const [plants, setPlants] = useState([]);\n  //Fetching data from the database\n  useEffect(() => {\n    fetch(\"http://localhost:6001/plants\").then(response => response.json()).then(plants => setPlants(plants)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  //Adding a new plant on the form\n  const addPlant = newPlant => {\n    fetch(\"http://localhost:6001/plants\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newPlant)\n    }).then(response => response.json()).then(addedPlant => {\n      setPlants(prevPlants => [...prevPlants, addedPlant]);\n    }).catch(error => console.error('Error adding plant:', error));\n  };\n\n  // Handle search input change\n  const handleSearch = query => {\n    setSearchQuery(query);\n  };\n\n  // Filter plants based on search query\n  const filteredPlants = plants.filter(plant => plant.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(NewPlantForm, {\n      onAddPlant: addPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlantList, {\n      plants: plants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantPage, \"gLr7j+f/M9K8FSUeLTOcFFeB2DY=\");\n_c = PlantPage;\nexport default PlantPage;\nvar _c;\n$RefreshReg$(_c, \"PlantPage\");","map":{"version":3,"names":["React","useEffect","useState","NewPlantForm","PlantList","Search","jsxDEV","_jsxDEV","PlantPage","_s","plants","setPlants","fetch","then","response","json","catch","error","console","addPlant","newPlant","method","headers","body","JSON","stringify","addedPlant","prevPlants","handleSearch","query","setSearchQuery","filteredPlants","filter","plant","name","toLowerCase","includes","searchQuery","children","onAddPlant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js"],"sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\n\nfunction PlantPage() {\n  const [plants, setPlants] = useState([]);\n//Fetching data from the database\n  useEffect (() => {\n    fetch(\"http://localhost:6001/plants\")\n    .then(response => response.json())\n    .then(plants => setPlants(plants))\n    .catch(error => console.error('Error fetching data:' ,error))\n  },[])\n//Adding a new plant on the form\n  const addPlant = (newPlant) => {\n    fetch(\"http://localhost:6001/plants\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPlant),\n    })\n    .then(response => response.json())\n    .then(addedPlant => {setPlants((prevPlants) => [...prevPlants, addedPlant])})\n    .catch(error => console.error('Error adding plant:', error));\n  };\n\n   // Handle search input change\n   const handleSearch = (query) => {\n    setSearchQuery(query);\n  };\n\n  // Filter plants based on search query\n  const filteredPlants = plants.filter((plant) =>\n    plant.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  return (\n    <main>\n      <NewPlantForm onAddPlant={addPlant} />\n      <Search  />\n      <PlantList plants={plants} />\n    </main>\n  );\n}\n\nexport default PlantPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,SAAS,EAACC,QAAQ,QAAO,OAAO;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACED,SAAS,CAAE,MAAM;IACfW,KAAK,CAAC,8BAA8B,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACH,MAAM,IAAIC,SAAS,CAACD,MAAM,CAAC,CAAC,CACjCM,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAC/D,CAAC,EAAC,EAAE,CAAC;EACP;EACE,MAAME,QAAQ,GAAIC,QAAQ,IAAK;IAC7BR,KAAK,CAAC,8BAA8B,EAAE;MACpCS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC,CACDP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACa,UAAU,IAAI;MAACf,SAAS,CAAEgB,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,UAAU,CAAC,CAAC;IAAA,CAAC,CAAC,CAC5EV,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAC9D,CAAC;;EAEA;EACA,MAAMW,YAAY,GAAIC,KAAK,IAAK;IAC/BC,cAAc,CAACD,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAME,cAAc,GAAGrB,MAAM,CAACsB,MAAM,CAAEC,KAAK,IACzCA,KAAK,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACC,WAAW,CAACF,WAAW,EAAE,CAAC,CAC7D;EACD,oBACE5B,OAAA;IAAA+B,QAAA,gBACE/B,OAAA,CAACJ,YAAY;MAACoC,UAAU,EAAEpB;IAAS;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtCpC,OAAA,CAACF,MAAM;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACXpC,OAAA,CAACH,SAAS;MAACM,MAAM,EAAEA;IAAO;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACxB;AAEX;AAAClC,EAAA,CAvCQD,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAyClB,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}