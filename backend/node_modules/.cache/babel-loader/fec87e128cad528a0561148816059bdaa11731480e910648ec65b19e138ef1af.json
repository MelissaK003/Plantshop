{"ast":null,"code":"var _jsxFileName = \"/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantPage() {\n  _s();\n  const [plants, setPlants] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:6001/plants\").then(response => response.json()).then(plants => setPlants(plants)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // If searchTerm is empty, return all plants\n  // If searchTerm has value, return filtered plants\n  const filteredPlants = plants === null || plants === void 0 ? void 0 : plants.filter(plant => searchTerm === \"\" ? true : plant.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(NewPlantForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      searchTerm: searchTerm,\n      onSearchChange: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlantList, {\n      plants: filteredPlants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantPage, \"WkoboHDCcEsgEbhhpVFxCA7CyaQ=\");\n_c = PlantPage;\nvar _c;\n$RefreshReg$(_c, \"PlantPage\");","map":{"version":3,"names":["PlantPage","_s","plants","setPlants","useState","searchTerm","setSearchTerm","useEffect","fetch","then","response","json","catch","error","console","filteredPlants","filter","plant","name","toLowerCase","includes","_jsxDEV","children","NewPlantForm","fileName","_jsxFileName","lineNumber","columnNumber","Search","onSearchChange","PlantList","_c","$RefreshReg$"],"sources":["/home/melissack/Development/Challenge/Plantshop/src/components/PlantPage.js"],"sourcesContent":["function PlantPage() {\n  const [plants, setPlants] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"http://localhost:6001/plants\")\n      .then(response => response.json())\n      .then(plants => setPlants(plants))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // If searchTerm is empty, return all plants\n  // If searchTerm has value, return filtered plants\n  const filteredPlants = plants?.filter(plant => \n    searchTerm === \"\" ? true : plant.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <main>\n      <NewPlantForm />\n      <Search searchTerm={searchTerm} onSearchChange={setSearchTerm} />\n      <PlantList plants={filteredPlants} />\n    </main>\n  );\n}"],"mappings":";;;AAAA,SAASA,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAEhDG,SAAS,CAAC,MAAM;IACdC,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACP,MAAM,IAAIC,SAAS,CAACD,MAAM,CAAC,CAAC,CACjCU,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAME,cAAc,GAAGb,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEc,MAAM,CAACC,KAAK,IACzCZ,UAAU,KAAK,EAAE,GAAG,IAAI,GAAGY,KAAK,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACf,UAAU,CAACc,WAAW,EAAE,CAAC,CACvF;EAED,oBACEE,OAAA;IAAAC,QAAA,gBACED,OAAA,CAACE,YAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChBN,OAAA,CAACO,MAAM;MAACvB,UAAU,EAAEA,UAAW;MAACwB,cAAc,EAAEvB;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjEN,OAAA,CAACS,SAAS;MAAC5B,MAAM,EAAEa;IAAe;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChC;AAEX;AAAC1B,EAAA,CAxBQD,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}